name: Build HaikuPorts packages

on:
  workflow_dispatch:
  push:
    branches: [ main, master, development ] # Adjust as per your repository's default branches
  pull_request:
    branches: [ main, master, development ] # Adjust as per your repository's default branches

jobs:
  prepare-build:
    runs-on: ubuntu-latest
    outputs:
      changed_recipes_json: ${{ steps.detect-changes.outputs.changed_recipes_json }}
      has_changed_recipes: ${{ steps.detect-changes.outputs.has_changed_recipes }}
    steps:
      - name: Checkout HaikuPorts repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up Python for HaikuPorter
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install HaikuPorter
        run: |
          git clone https://github.com/haikuports/haikuporter.git ~/haikuporter
          sudo ln -s "$HOME/haikuporter/haikuporter" /usr/local/bin/haikuporter
          echo "HaikuPorter installed. Version:"
          haikuporter --version
        shell: bash

      - name: Set up HaikuPorter configuration
        run: |
          echo "TREE_PATH=\"${{ github.workspace }}\"" > "${{ github.workspace }}/haikuports.conf"
          echo "PACKAGER=\"CI Builder <ci@example.com>\"" >> "${{ github.workspace }}/haikuports.conf"
          cat "${{ github.workspace }}/haikuports.conf"
        shell: bash

#      - name: Download Haiku Licenses
#        run: |
#          wget https://github.com/waddlesplash/haiku-licenses/archive/master.zip -O haiku-licenses.zip
#          unzip -q haiku-licenses.zip
#          echo "Haiku Licenses downloaded and unzipped. Found directories:"
#          ls -d ${{ github.workspace }}/haiku-licenses-*/ # Verify directory name relative to workspace
#        shell: bash

      - name: Detect modified recipes
        id: detect-changes
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          GIT_PRIMARY_BRANCH_REF=""
          if git rev-parse --verify origin/main >/dev/null 2>&1; then
            GIT_PRIMARY_BRANCH_REF="origin/main"
          elif git rev-parse --verify origin/master >/dev/null 2>&1; then
            GIT_PRIMARY_BRANCH_REF="origin/master"
          fi

          if [ -z "$GIT_PRIMARY_BRANCH_REF" ]; then
            echo "::warning::No main or master branch found at origin to compare against. Assuming all recipes need checking."
            CHANGED_RECIPES=$(find . -name '*.recipe' -printf '%h\n' | sed 's|^\./||' | sort -u)
            echo "build_all_flag=true" >> $GITHUB_OUTPUT 
          else
            echo "Primary branch for comparison: $GIT_PRIMARY_BRANCH_REF"
            if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
              TARGET_REF="origin/$GITHUB_BASE_REF"
              git fetch origin "$GITHUB_BASE_REF" --depth=1
              MERGE_BASE=$(git merge-base HEAD "$TARGET_REF")
              echo "Pull Request: Diffing from merge base $MERGE_BASE to HEAD ($GITHUB_SHA)"
              CHANGED_RECIPES=$(git diff --name-only "$MERGE_BASE" HEAD -- '*/*.recipe' | sed 's|/[^/]*\.recipe$||g' | sort -u)
            else
              echo "Push/Manual Trigger: Diffing from $GIT_PRIMARY_BRANCH_REF to HEAD ($GITHUB_SHA)"
              CHANGED_RECIPES=$(git diff --name-only "$GIT_PRIMARY_BRANCH_REF...HEAD" -- '*/*.recipe' | sed 's|/[^/]*\.recipe$||g' | sort -u)
            fi
            echo "build_all_flag=false" >> $GITHUB_OUTPUT
          fi
          CHANGED_RECIPES=$(echo "$CHANGED_RECIPES" | sed '/^$/d')

          if [ -z "$CHANGED_RECIPES" ]; then
            echo "No recipes changed."
            echo "changed_recipes_json=[]" >> $GITHUB_OUTPUT
            echo "has_changed_recipes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed recipes found:"
            echo "$CHANGED_RECIPES"
            CHANGED_RECIPES_JSON=$(echo "$CHANGED_RECIPES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "changed_recipes_json=$CHANGED_RECIPES_JSON" >> $GITHUB_OUTPUT
            echo "has_changed_recipes=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

#      - name: Ensure All Dependency Infos in Output Repository
#        id: generate-deps
#        if: steps.detect-changes.outputs.has_changed_recipes == 'true'
#        run: |
#          echo "Ensuring all necessary .DependencyInfo files are in ${{ github.workspace }}/output/repository/ ..."
#          LICENSES_DIR_NAME=$(ls -d ${{ github.workspace }}/haiku-licenses-*/ | head -n 1 | xargs basename)
#          echo "Using licenses directory: $LICENSES_DIR_NAME at ${{ github.workspace }}/$LICENSES_DIR_NAME"
#
#          # Create directories needed by HaikuPorter and for dummy flags
#          mkdir -p "${{ github.workspace }}/output/packages"
#          mkdir -p "${{ github.workspace }}/output/repository" # This is our target REPOSITORY_PATH
#          mkdir -p "${{ github.workspace }}/dummy_mimedb"
#          mkdir -p "${{ github.workspace }}/dummy_cross_tools"
#
#          echo "Running global 'haikuporter --repository-update' to populate ${{ github.workspace }}/output/repository/ ..."
#          haikuporter --config="${{ github.workspace }}/haikuports.conf"                  --licenses="${{ github.workspace }}/$LICENSES_DIR_NAME"                  --repository-update
#
#          HP_GLOBAL_UPDATE_EXIT_CODE=$?
#          if [ $HP_GLOBAL_UPDATE_EXIT_CODE -ne 0 ]; then
#            echo "::warning::Global 'haikuporter --repository-update' failed with exit code $HP_GLOBAL_UPDATE_EXIT_CODE. Will rely on individual generation for changed recipes."
#          else
#            echo "Global 'haikuporter --repository-update' completed."
#          fi
#
#          echo "----------------------------------------------------------------------"
#          echo "Final listing of consolidated REPOSITORY_PATH (${{ github.workspace }}/output/repository/) before caching:"
#          ls -R "${{ github.workspace }}/output/repository/"
#        shell: bash

      - name: Save changed recipes list to a file for caching
        if: steps.detect-changes.outputs.has_changed_recipes == 'true'
        run: |
          echo '${{ steps.detect-changes.outputs.changed_recipes_json }}' > changed_recipes_list.json
          echo "Saved changed recipes JSON to changed_recipes_list.json for caching."
        shell: bash
        
      - name: Cache .DependencyInfo files and changed recipes list
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/output/repository
            changed_recipes_list.json
          key: ${{ runner.os }}-haiku-deps-v3-${{ github.sha }} # Incremented cache key version
          restore-keys: |
            ${{ runner.os }}-haiku-deps-v3-

  build-haikuports: 
    runs-on: ubuntu-latest
    needs: prepare-build 
    env:
      VM_CPU: 4
      VM_RAM: 15G
    container: docker.io/hectorm/qemu-haiku:latest

    steps:
      - name: Wait until the VM is ready
        run: container-init & timeout 600 vmshell exit 0

      - name: Restore cached DependencyInfo files and recipes list
        id: restore-cache
        uses: actions/cache@v4
        with:
          path: |
            dependency-infos 
            changed_recipes_list.json
          key: ${{ runner.os }}-haiku-deps-${{ github.sha }}

      - name: Install build dependencies and compilation tools in VM
        run: |
          vmshell pkgman install -y \
            gcc binutils make cmake autoconf automake \
            bison flex gawk gettext git gmp gperf grep \
            libtool m4 nasm ncurses6 patch pkgconf \
            python3.10 sed tar xz_utils zlib zlib_devel \
            curl curl_devel openssl3 openssl3_devel \
            glib2 glib2_devel gtk3 gtk3_devel cairo1.18 cairo1.18_devel \
            fontconfig fontconfig_devel freetype freetype_devel \
            harfbuzz harfbuzz_devel pango pango_devel \
            expat libffi libffi_devel libxml2 libxml2_devel \
            libxslt libpcre libpcre_devel libpng16 libpng16_devel \
            libjpeg_turbo libjpeg_turbo_devel tiff tiff_devel \
            libarchive libarchive_devel bzip2 bzip2_devel \
            libyaml libyaml_devel jsoncpp meson ninja \
            bash coreutils diffutils findutils gzip file \
            which unzip zip bc less vim nano pip_python310 jq haikuporter \
            json_glib_devel json_glib wayland_protocols gtk_doc \
            zstd_devel zstd

      - name: Checkout HaikuPorts repository in VM
        run: |
          vmshell "mkdir -p /boot/home/haikuports && \
            git clone https://github.com/${GITHUB_REPOSITORY}.git /boot/home/haikuports && \
            cd /boot/home/haikuports && \
            git checkout ${GITHUB_SHA}"

      - name: Setup HaikuPorter and place .DependencyInfo files in VM
        run: |
          vmshell "mkdir -p /boot/home/config/settings"
          vmshell "echo 'TREE_PATH=\"/boot/home/haikuports\"' > /boot/home/config/settings/haikuports.conf"
          vmshell "echo 'PACKAGER=\"GitHub Actions Builder <actions@github.com>\"' >> /boot/home/config/settings/haikuports.conf"

          if [ -f "changed_recipes_list.json" ]; then
            echo "Cached files (changed_recipes_list.json) found on runner. Transferring to VM..."
            tar -czf dependency-infos.tar.gz -C dependency-infos .
            cat dependency-infos.tar.gz | vmshell "cat > /tmp/dependency-infos.tar.gz"
            cat changed_recipes_list.json | vmshell "cat > /tmp/changed_recipes_list.json"
            vmshell "cd /boot/home/haikuports && \
              echo 'Extracting .DependencyInfo files into /boot/home/haikuports/ ...' && \
              tar -xzf /tmp/dependency-infos.tar.gz && \
              echo 'Listing structure of extracted files in /boot/home/haikuports (first few levels for verification):' && \
              ls -R . | head -n 50 && \
              rm /tmp/dependency-infos.tar.gz"
            echo "DependencyInfo files and recipes list transferred and extracted in VM."
          else
            echo "No cached changed_recipes_list.json found on runner (implies no changes or cache miss)."
            vmshell "echo '[]' > /tmp/changed_recipes_list.json"
            echo "Created empty /tmp/changed_recipes_list.json in VM."
          fi
        shell: bash 

      - name: Build modified packages with haikuporter
        if: needs.prepare-build.outputs.has_changed_recipes == 'true'
        run: |
          vmshell "cd ~/haikuports && \
            echo 'Reading list of changed packages from /tmp/changed_recipes_list.json' && \
            PACKAGES_JSON=\$(cat /tmp/changed_recipes_list.json) && \
            echo \"Packages to build (JSON list of recipe paths): \$PACKAGES_JSON\" && \
            \
            mkdir -p packages && \
            mkdir -p repository && \
            \
            # Convert JSON array to a space-separated string of shell-escaped arguments
            RECIPE_ARGS_STRING=\$(echo \"\$PACKAGES_JSON\" | jq -r '. | @sh')
            \
            if [ -z \"\$RECIPE_ARGS_STRING\" ] || [ \"\$RECIPE_ARGS_STRING\" = \"''\" ] || [ \"\$RECIPE_ARGS_STRING\" = \"'[]'\" ]; then \
              echo 'No packages specified in the list to build.' ; \
            else \
              echo \"Executing haikuporter with args: \$RECIPE_ARGS_STRING\" ; \
              # Use eval to correctly parse the space-separated, potentially quoted arguments
              if eval \"haikuporter \$RECIPE_ARGS_STRING -S -j4\"; then \
                echo \"✓ HaikuPorter command for batch build completed successfully.\" ; \
              else \
                BUILD_FAILURE_CODE=\$? ; \
                echo \"✗ HaikuPorter command for batch build failed with exit code \$BUILD_FAILURE_CODE.\" ; \
                # Exit the vmshell script with the failure code, which will fail the GitHub Actions step
                exit \$BUILD_FAILURE_CODE ; \
              fi ; \
            fi ; \
            \
            echo \"Build summary (within VM):\" ; \
            NUM_PACKAGES=\$(echo \"\$PACKAGES_JSON\" | jq -r '. | length') ; \
            echo \"- Packages in batch: \$NUM_PACKAGES\" ; \
            if [ -z \"\$RECIPE_ARGS_STRING\" ] || [ \"\$RECIPE_ARGS_STRING\" = \"''\" ] || [ \"\$RECIPE_ARGS_STRING\" = \"'[]'\" ]; then \
                echo \"No packages were attempted.\" ; \
            else \
                # If the script reaches here, the haikuporter command must have succeeded (due to 'exit' on failure)
                echo \"Batch build attempt reported success by HaikuPorter exit code.\" ; \
            fi"

      - name: Collect build artifacts
        if: always()
        run: |
          mkdir -p build-artifacts
          vmshell "cd ~/haikuports && \
            if [ -d packages ] && [ \"\$(ls -A packages/*.hpkg 2>/dev/null)\" ]; then
              echo 'Found built packages:'
              ls -la packages/*.hpkg || true
              tar -czf /tmp/built-packages.tar.gz packages/*.hpkg
            else
              echo 'No packages were built'
              tar -czf /tmp/built-packages.tar.gz -T /dev/null 
            fi
            if [ -d work ]; then
              find work -name '*.log' -type f -print0 | head -z -n 20 | xargs -0 tar -czf /tmp/build-logs.tar.gz 2>/dev/null || \
              tar -czf /tmp/build-logs.tar.gz -T /dev/null 
            else
              tar -czf /tmp/build-logs.tar.gz -T /dev/null
            fi"
          vmshell cat /tmp/built-packages.tar.gz > build-artifacts/built-packages.tar.gz
          vmshell cat /tmp/build-logs.tar.gz > build-artifacts/build-logs.tar.gz

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: haikuports-build-${{ github.run_number }}
          path: build-artifacts/
          retention-days: 30

      - name: Display build summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.prepare-build.outputs.has_changed_recipes }}" = "true" ]; then
            PACKAGES_JSON_STRING='${{ needs.prepare-build.outputs.changed_recipes_json }}'
            DISPLAY_PACKAGES=$(echo "$PACKAGES_JSON_STRING" | jq -r '. | join(", ")' || echo "$PACKAGES_JSON_STRING")
            echo "**Packages processed (recipe paths):** $DISPLAY_PACKAGES" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Artifacts:** Check the uploaded build artifacts for built packages and logs." >> $GITHUB_STEP_SUMMARY
          else
            echo "**Result:** No recipes needed to be built (based on change detection in prepare-build job)." >> $GITHUB_STEP_SUMMARY
          fi


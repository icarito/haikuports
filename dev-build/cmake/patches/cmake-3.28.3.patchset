From bdfde315f01be082c799d55a51a32000a6df0609 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@pulkomandy.tk>
Date: Sat, 24 Mar 2018 14:19:43 +0100
Subject: Fix search path for Lua headers.


diff --git a/Modules/FindLua51.cmake b/Modules/FindLua51.cmake
index 405a7a7..f7fa477 100644
--- a/Modules/FindLua51.cmake
+++ b/Modules/FindLua51.cmake
@@ -29,7 +29,7 @@ locations other than lua/
 find_path(LUA_INCLUDE_DIR lua.h
   HINTS
     ENV LUA_DIR
-  PATH_SUFFIXES include/lua51 include/lua5.1 include/lua-5.1 include/lua include
+  PATH_SUFFIXES include/lua51 include/lua5.1 include/lua-5.1 include/lua include lua5.1
   PATHS
   ~/Library/Frameworks
   /Library/Frameworks
-- 
2.45.2


From f91921cf37dab9a34b3de3ffaf8f967ffd5ac874 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 7 Sep 2019 17:29:56 +0200
Subject: links against libnetwork


diff --git a/bootstrap b/bootstrap
index 115c354..84a9759 100755
--- a/bootstrap
+++ b/bootstrap
@@ -1772,6 +1772,9 @@ else
       uv_c_flags="${uv_c_flags} -D_XOPEN_SOURCE=700"
       libs="${libs} -lsocket"
       ;;
+    *Haiku*)
+      libs="${libs} -lnetwork"
+      ;;
   esac
 fi
 if test "x${bootstrap_system_libuv}" = "x"; then
-- 
2.45.2


From e019bb0a453aeb7bb326131043e043335331fe88 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 7 Sep 2019 23:46:47 +0200
Subject: bootstrap uses cmlibuv


diff --git a/Utilities/cmlibuv/src/unix/core.c b/Utilities/cmlibuv/src/unix/core.c
index d0b0e00..e7ed773 100644
--- a/Utilities/cmlibuv/src/unix/core.c
+++ b/Utilities/cmlibuv/src/unix/core.c
@@ -1439,7 +1439,9 @@ int uv_os_getpriority(uv_pid_t pid, int* priority) {
     return UV_EINVAL;
 
   errno = 0;
+#ifndef __HAIKU__
   r = getpriority(PRIO_PROCESS, (int) pid);
+#endif
 
   if (r == -1 && errno != 0)
     return UV__ERR(errno);
@@ -1453,8 +1455,10 @@ int uv_os_setpriority(uv_pid_t pid, int priority) {
   if (priority < UV_PRIORITY_HIGHEST || priority > UV_PRIORITY_LOW)
     return UV_EINVAL;
 
+#ifndef __HAIKU__
   if (setpriority(PRIO_PROCESS, (int) pid, priority) != 0)
     return UV__ERR(errno);
+#endif
 
   return 0;
 }
-- 
2.45.2


From 7b45c570b03574443bb0c6ed5e210322212ab039 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Sat, 21 Sep 2019 15:30:44 +0200
Subject: Haiku: Improve secondary arch detection

Find the directory when it's not the last in the list.

diff --git a/Modules/Platform/Haiku.cmake b/Modules/Platform/Haiku.cmake
index 7d9a737..74b17f5 100644
--- a/Modules/Platform/Haiku.cmake
+++ b/Modules/Platform/Haiku.cmake
@@ -33,8 +33,8 @@ execute_process(
   RESULT_VARIABLE _HAIKU_SEARCH_DIRS_FOUND
   OUTPUT_STRIP_TRAILING_WHITESPACE)
 
-string(REGEX MATCH "libraries: =?([^\n]*:)?/boot/system/develop/lib/([^/]*)/?(:?\n+)" _dummy "${_HAIKU_SEARCH_DIRS}\n")
-set(CMAKE_HAIKU_SECONDARY_ARCH "${CMAKE_MATCH_2}")
+string(REGEX MATCH "libraries: =?([^\n]*:)?(/boot)?/system(/develop)?/lib/([^/]*)/?(:|\n)" _dummy "${_HAIKU_SEARCH_DIRS}\n")
+set(CMAKE_HAIKU_SECONDARY_ARCH "${CMAKE_MATCH_4}")
 
 if(NOT CMAKE_HAIKU_SECONDARY_ARCH)
   set(CMAKE_HAIKU_SECONDARY_ARCH_SUBDIR "")
-- 
2.45.2


From 8203e383c4cdfab1756010f4fa80cbad748cafe8 Mon Sep 17 00:00:00 2001
From: Augustin Cavalier <waddlesplash@gmail.com>
Date: Fri, 21 Feb 2020 15:38:39 -0500
Subject: Modules/Haiku: Set CMAKE_SYSTEM_FRAMEWORK_PATH.


diff --git a/Modules/Platform/Haiku.cmake b/Modules/Platform/Haiku.cmake
index 74b17f5..41d77bb 100644
--- a/Modules/Platform/Haiku.cmake
+++ b/Modules/Platform/Haiku.cmake
@@ -117,6 +117,9 @@ LIST(APPEND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES
 
 LIST(APPEND CMAKE_SYSTEM_LIBRARY_PATH ${CMAKE_HAIKU_DEVELOP_LIB_DIRECTORIES})
 
+# This is needed for find_package to search develop/lib/cmake/.
+list(APPEND CMAKE_SYSTEM_FRAMEWORK_PATH /boot/system/develop /boot/system/non-packaged/develop)
+
 if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
   set(CMAKE_INSTALL_PREFIX "/boot/system" CACHE PATH
     "Install path prefix, prepended onto install directories." FORCE)
-- 
2.45.2


From bc8fa4b88742e2fbd96ba691b74de72e63724cb2 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Thu, 15 Apr 2021 21:09:12 +0200
Subject: disable dependency tracking for older GNU compilers


diff --git a/Modules/Compiler/GNU.cmake b/Modules/Compiler/GNU.cmake
index d01054b..7a5271c 100644
--- a/Modules/Compiler/GNU.cmake
+++ b/Modules/Compiler/GNU.cmake
@@ -49,7 +49,9 @@ macro(__compiler_gnu lang)
     # distcc does not transform -o to -MT when invoking the preprocessor
     # internally, as it ought to.  Work around this bug by setting -MT here
     # even though it isn't strictly necessary.
-    set(CMAKE_DEPFILE_FLAGS_${lang} "-MD -MT <DEP_TARGET> -MF <DEP_FILE>")
+    if(NOT CMAKE_${lang}_COMPILER_ID STREQUAL "GNU" OR NOT CMAKE_${lang}_COMPILER_VERSION VERSION_LESS 4.0)
+      set(CMAKE_DEPFILE_FLAGS_${lang} "-MD -MT <DEP_TARGET> -MF <DEP_FILE>")
+    endif()
   endif()
 
   # define flags for linker depfile generation
-- 
2.45.2


From ecbbf02731e0a441ffa4f292b4022893020e177e Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Wed, 20 Oct 2021 14:28:22 +0200
Subject: Haiku: fix install dirs, let FindPackage search in data/


diff --git a/Source/CMakeInstallDestinations.cmake b/Source/CMakeInstallDestinations.cmake
index e82bec3..0f8a620 100644
--- a/Source/CMakeInstallDestinations.cmake
+++ b/Source/CMakeInstallDestinations.cmake
@@ -1,11 +1,11 @@
 # Keep formatting here consistent with bootstrap script expectations.
 if(BEOS)
   set(CMAKE_BIN_DIR_DEFAULT "bin") # HAIKU
-  set(CMAKE_DATA_DIR_DEFAULT "share/cmake-${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}") # HAIKU
+  set(CMAKE_DATA_DIR_DEFAULT "data/cmake-${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}") # HAIKU
   set(CMAKE_DOC_DIR_DEFAULT "documentation/doc/cmake-${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}") # HAIKU
   set(CMAKE_INFO_DIR_DEFAULT "documentation/info") # HAIKU
   set(CMAKE_MAN_DIR_DEFAULT "documentation/man") # HAIKU
-  set(CMAKE_XDGDATA_DIR_DEFAULT "share") # HAIKU
+  set(CMAKE_XDGDATA_DIR_DEFAULT "data") # HAIKU
 elseif(CYGWIN)
   set(CMAKE_BIN_DIR_DEFAULT "bin") # CYGWIN
   set(CMAKE_DATA_DIR_DEFAULT "share/cmake-${CMake_VERSION}") # CYGWIN
diff --git a/Source/cmFindPackageCommand.cxx b/Source/cmFindPackageCommand.cxx
index 30458cd..68fecef 100644
--- a/Source/cmFindPackageCommand.cxx
+++ b/Source/cmFindPackageCommand.cxx
@@ -2679,7 +2679,11 @@ bool cmFindPackageCommand::SearchPrefix(std::string const& prefix_in)
     common.emplace_back("libx32"_s);
   }
   common.emplace_back("lib"_s);
+#ifdef __HAIKU__
+  common.emplace_back("data"_s);
+#else
   common.emplace_back("share"_s);
+#endif
 
   auto cmnGen = cmEnumPathSegmentsGenerator{ common };
   auto cmakeGen = cmAppendPathSegmentGenerator{ "cmake"_s };
-- 
2.45.2


From feff435b069d58d6db492085dd62415d64d3f558 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Wed, 23 Feb 2022 13:44:06 +0100
Subject: Disable weak symbols; they do not seem to behave correctly.


diff --git a/Utilities/cmzstd/lib/common/zstd_trace.h b/Utilities/cmzstd/lib/common/zstd_trace.h
index 485cadf..95dc81b 100644
--- a/Utilities/cmzstd/lib/common/zstd_trace.h
+++ b/Utilities/cmzstd/lib/common/zstd_trace.h
@@ -20,7 +20,7 @@ extern "C" {
 /* weak symbol support */
 #if !defined(ZSTD_HAVE_WEAK_SYMBOLS) && defined(__GNUC__) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__MINGW32__) && \
-    !defined(__CYGWIN__) && !defined(_AIX)
+    !defined(__CYGWIN__) && !defined(_AIX) && !defined(__HAIKU__)
 #  define ZSTD_HAVE_WEAK_SYMBOLS 1
 #else
 #  define ZSTD_HAVE_WEAK_SYMBOLS 0
-- 
2.45.2


From 0510c47fb9f80029fece57683e78eb48b2e61d97 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Fri, 9 Feb 2024 13:48:22 +0100
Subject: Haiku: enable debugger


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2823ca4..0b6877c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -137,7 +137,7 @@ option(CMake_BUILD_PCH "Compile CMake with precompiled headers" OFF)
 if(NOT CMake_TEST_EXTERNAL_CMAKE)
   if(NOT DEFINED CMake_ENABLE_DEBUGGER)
     # The debugger uses cppdap, which does not compile everywhere.
-    if(CMAKE_SYSTEM_NAME MATCHES "Windows|Darwin|Linux|BSD|DragonFly|CYGWIN|MSYS"
+    if(CMAKE_SYSTEM_NAME MATCHES "Windows|Darwin|Linux|BSD|DragonFly|CYGWIN|MSYS|Haiku"
         AND NOT (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.16)
         AND NOT (CMAKE_CXX_COMPILER_ID STREQUAL "XLClang" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 16.1)
         )
diff --git a/Source/CMakeLists.txt b/Source/CMakeLists.txt
index 1bc855e..93378da 100644
--- a/Source/CMakeLists.txt
+++ b/Source/CMakeLists.txt
@@ -822,6 +822,9 @@ if(CMake_ENABLE_DEBUGGER)
     )
   endif()
   target_link_libraries(CMakeLib PUBLIC cppdap::cppdap)
+  if(HAIKU)
+    target_link_libraries(CMakeLib PUBLIC network)
+  endif()
 endif()
 
 # Check if we can build the Mach-O parser.
-- 
2.45.2


From b09dd23084bbcb906a9e6d9dfbcde7e7c3de8722 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?M=C3=A1ximo=20Casta=C3=B1eda?= <antiswen@yahoo.es>
Date: Sat, 31 Aug 2024 21:52:20 +0200
Subject: Fix build for non-x86 arches


diff --git a/Source/kwsys/SystemInformation.cxx b/Source/kwsys/SystemInformation.cxx
index 369ff9a..84d5d65 100644
--- a/Source/kwsys/SystemInformation.cxx
+++ b/Source/kwsys/SystemInformation.cxx
@@ -4998,6 +4998,7 @@ bool SystemInformationImplementation::QueryHaikuInfo()
   this->TotalVirtualMemory = 0;
   this->AvailableVirtualMemory = 0;
 
+#if defined(__i386__) || defined(__x86_64__)
   // Retrieve cpuid_info union for cpu 0
   cpuid_info cpu_info;
   get_cpuid(&cpu_info, 0, 0);
@@ -5033,6 +5034,7 @@ bool SystemInformationImplementation::QueryHaikuInfo()
 
   // Chip Extended Model
   this->ChipID.ExtendedModel = cpu_info.eax_1.extended_model;
+#endif
 
   // Get ChipID.ProcessorName from other information already gathered
   this->RetrieveClassicalCPUIdentity();
-- 
2.45.2


From fb94f94843cfa04242f1f43bb4e0a2d9e185ca93 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Wed, 25 Sep 2024 09:11:06 +0200
Subject: FindPython: when component Development is searched, also search
 Interpreter

FindPython only uses the python config when an interpreter is found.
The python config contains the right include paths on x86 for instance.

diff --git a/Modules/FindPython/Support.cmake b/Modules/FindPython/Support.cmake
index 08ab9c0..89e49ec 100644
--- a/Modules/FindPython/Support.cmake
+++ b/Modules/FindPython/Support.cmake
@@ -1360,6 +1360,9 @@ if ("NumPy" IN_LIST ${_PYTHON_PREFIX}_FIND_COMPONENTS)
 endif()
 if ("Development" IN_LIST ${_PYTHON_PREFIX}_FIND_COMPONENTS)
   list (APPEND ${_PYTHON_PREFIX}_FIND_COMPONENTS "Development.Module" "Development.Embed")
+  if (HAIKU)
+    list (APPEND ${_PYTHON_PREFIX}_FIND_COMPONENTS "Interpreter")
+  endif()
 endif()
 list (REMOVE_DUPLICATES ${_PYTHON_PREFIX}_FIND_COMPONENTS)
 foreach (_${_PYTHON_PREFIX}_COMPONENT IN ITEMS Interpreter Compiler Development Development.Module Development.SABIModule Development.Embed NumPy)
-- 
2.45.2

